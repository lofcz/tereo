@using TeReoLocalizer.Shared.Code
@using TeReoLocalizer.Shared.Code.Services
@inject IJSRuntime Js
@implements TeReoLocalizer.Shared.Code.IGenericModalRef
@code {
    [CascadingParameter] 
    BlazingModalInstance BlazoredModal { get; set; } = default!;
    [Parameter]
    public Dictionary<string, object>? RenderFragmentParams { get; set; }
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public string? Description { get; set; }
    [Parameter]
    public Func<string, Task>? ConfirmAction { get; set; }
    [Parameter]
    public Func<Task>? CancelAction { get; set; }
    [Parameter] 
    public GenericModal? GenericModalRef { get; set; }
    [Parameter]
    public ModalSizes Size { get; set; } = ModalSizes.Medium;
    [Parameter]
    public Button? ConfirmButton { get; set; }
    [Parameter]
    public Button? CancelButton { get; set; }
    [Parameter]
    public Func<Task<string>>? DescriptionFn { get; set; }
    [Parameter]
    public DynamicComponentInfo? BodyComponent { get; set; }
    [Parameter]
    public string? DefaultText { get; set; }
    [Parameter]
    public string? Placeholder { get; set; }

    string finalDescription;
    bool ready;
    string promptInput;
    bool inputFocused;
    string inputId = General.IIID();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        finalDescription = Description ?? string.Empty;

        if (DescriptionFn is not null)
        {
            finalDescription = await DescriptionFn.Invoke();
        }

        ready = true;
        promptInput = DefaultText ?? string.Empty;
    }

    public async Task CancelWithAction()
    {
        await BlazoredModal.CloseAsync(ModalResult.Cancel(true));
        
        if (CancelAction is not null)
        {
            await CancelAction.Invoke();
        }
    }

    public async Task ConfirmWithAction()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok(true));
        
        if (ConfirmAction is not null)
        {
            await ConfirmAction.Invoke(promptInput);
        } 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!inputFocused && ready)
        {
            await Js.Focus(inputId);
            inputFocused = true;
        }
    }

    async Task HandleKeyPress(KeyboardEventArgs args)
    {
        if (!promptInput.IsNullOrWhiteSpace() && args.Code == "Enter")
        {
            await ConfirmWithAction();
        }
    }
}

@if (ready)
{
    <EdModal Title="@Title" Description="@finalDescription" DescriptionComponent="BodyComponent" Size="Size" CancelAction="CancelWithAction" GenericModalRef="GenericModalRef">
        <input @onkeyup="HandleKeyPress" id="@inputId" class="form-control form-control-sm" placeholder="@Placeholder" @bind="promptInput" />
        <EdButtonsContainer Style="gap: 10px;">
            <EdButton Size="ButtonSizes.Medium" OnClick="ConfirmWithAction">Potvrdit</EdButton>
            <EdButton Size="ButtonSizes.Medium" Design="@ButtonDesigns.Cancel" Fill="ButtonFillModes.Outline" OnClick="CancelWithAction">Zru≈°it</EdButton>
        </EdButtonsContainer>
    </EdModal>   
}