@implements IAsyncDisposable
@inject IJSRuntime Js
@using TeReoLocalizer.Shared.Code
@inherits AuthComponent
@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public ButtonTypes Type { get; set; }
    [Parameter]
    public ButtonDesigns Design { get; set; } = ButtonDesigns.Action;
    [Parameter]
    public ButtonFillModes Fill { get; set; } = ButtonFillModes.Fill;
    [Parameter]
    public ButtonSizes Size { get; set; } = ButtonSizes.MediumFixed;
    [Parameter]
    public string? Href { get; set; }
    [Parameter]
    public string Id { get; set; } = General.IIID();
    [Parameter]
    public string? Tooltip { get; set; }
    [Parameter]
    public Func<Task<string>>? TooltipFn { get; set; }
    [Parameter]
    public bool RenderOffset { get; set; } = true;
    [Parameter]
    public string? ContainerStyle { get; set; }
    [Parameter]
    public string? Name { get; set; }
    [Parameter] 
    public bool EnableFeedback { get; set; } = true;

    [CascadingParameter]
    public Func<Task<bool>>? BeforeSubmit { get; set; }
    [CascadingParameter]
    public EdForm? Context { get; set; }
    [CascadingParameter(Name = "ModalRef")]
    public EdModal? ModalContext { get; set; }
    [CascadingParameter(Name = "ButtonsContainer")]
    public EdButtonsContainer? ButtonsContainer { get; set; }
    bool FormIsSubmitting { get; set; }
    
    DotNetObjectReference<EdButton>? JsRef { get; set; }
    IJSObjectReference? JsObjectRef;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Context?.OwnedButtons.Add(this);
        
        if (TooltipFn is not null)
        {
            JsRef = DotNetObjectReference.Create(this);   
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public void SetFormIsSubmitting(bool inProgress)
    {
        FormIsSubmitting = inProgress;
        StateHasChanged();
    }
    
    bool IsDisabled => Disabled || FormIsSubmitting;

    string ComputeClass()
    {
        return $"btn {Size.GetStringValue()} btn-{(Design.GetStringValue())} {(Disabled ? "disabled" : string.Empty)} {Class}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (TooltipFn is not null && firstRender)
        {
            JsObjectRef = await Js.InvokeAsync<IJSObjectReference>("import", "./Scripts/Scoped/tooltip.js");
            await JsObjectRef.InvokeVoidAsync("Init", new
            {
                id = Id,
                net = JsRef
            });
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
    
    [JSInvokable]
    public async Task<string> GetTooltipContent()
    {
        if (TooltipFn is not null)
        {
            return await TooltipFn.Invoke();
        }

        return "[funkce GetTooltipContent nem√° implementaci]";
    }

    async Task HandleClick()
    {
        if (Type is ButtonTypes.Submit && Context is not null)
        {
            await Context.Submit(this);
        } 
        else 
        {
            await OnClick.InvokeAsync();
        } 
    }

    public async ValueTask DisposeAsync()
    {
        Context?.OwnedButtons.Remove(this);
        
        if (JsObjectRef is not null)
        {
            try
            {
                await JsObjectRef.DisposeAsync();
            }
            catch (Exception e)
            {
                
            }    
        }
        
        JsRef?.Dispose();
    }

}

@if (EnableFeedback && Context is {FormFeedback: null })
{
    <InternalEdFormFeedback AfterSubmitValidation="Context.AfterSubmitValidation" />
}

<div style="display: inline-grid; @ContainerStyle" class="btnBase">
    @if (Href.IsNullOrWhiteSpace())
    {
        <button style="@Style" id="@Id" @onclick="HandleClick" class="@(ComputeClass())" disabled="@IsDisabled">@ChildContent</button>
    }
    else
    {
        <a style="@Style" id="@Id" href="@Href" @onclick="HandleClick" class="@(ComputeClass()) btnA" disabled="@IsDisabled">
            <span class="btnAContent">@ChildContent</span>
        </a>
    }
</div>