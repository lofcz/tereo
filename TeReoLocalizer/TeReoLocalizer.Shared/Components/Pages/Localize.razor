@page "/localize"
@using System.Collections.Concurrent
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Json
@using System.Text.Unicode
@using DeepL
@using DeepL.Model
@using TeReoLocalizer.Annotations
@using TeReoLocalizer.Shared.Code
@using TeReoLocalizer.Shared.Code.Services
@inject IJSRuntime Js
@code {

    string langCode = "";
    string basePath = AppDomain.CurrentDomain.BaseDirectory;
    List<string> existingFiles = [];
    string newKey = "";
    Decl decl = new Decl();
    LangsData langsData = new LangsData();
    bool showLangs;
    string? generatedCode;
    bool ready;
    bool translating;
    string search = string.Empty;
    string? inputToFocus;
    TranslationModes translationMode = TranslationModes.Default;

    enum TranslationModes
    {
        Unknown,
        [StringValue("Výchozí")]
        Default,
        [StringValue("Zneplatnění")]
        Invalidate
    }

    protected override bool ShouldRender()
    {
        return ready;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!Consts.Cfg.Repository.IsNullOrWhiteSpace())
        {
            basePath = Consts.Cfg.Repository;
        }
        
        await base.OnInitializedAsync();
        await ShowLanguages(false);
     
        if (!Directory.Exists($"{basePath}/TeReo"))
        {
            Directory.CreateDirectory($"{basePath}/TeReo");
        }

        if (File.Exists($"{basePath}/TeReo/decl.json"))
        {
            string currentData = await File.ReadAllTextAsync($"{basePath}/TeReo/decl.json");
            decl = JsonSerializer.Deserialize<Decl>(currentData) ?? new Decl();   
        }

        ready = true;
    }

    async Task AddLanguage()
    {
        if (!File.Exists($"{basePath}/TeReo/lang_{langCode}.json"))
        {
            await File.WriteAllTextAsync($"{basePath}/TeReo/lang_{langCode}.json", "{}");
            
            await ShowLanguages(false);
            StateHasChanged();
        }
        else
        {
            await Js.InvokeVoidAsync("alert", $"Jazyk '{langCode}' je již přidán");
        }
    }
    
    async Task ShowLanguages(bool sl)
    {
        if (sl)
        {
            showLangs = true;   
        }
        
        existingFiles = Directory.GetFiles($"{basePath}/TeReo").ToList();
        
        await Parallel.ForEachAsync(existingFiles, async (str, ctx) =>
        {
            string lang = Path.GetFileName(str).Replace(".json", string.Empty).Replace("lang_", string.Empty);

            if (!Enum.TryParse(lang, out Languages result))
            {
                return;
            }
            
            string data = await File.ReadAllTextAsync(str, ctx);
            LangData? parsed = JsonSerializer.Deserialize<LangData>(data);

            langsData.Langs.TryAdd(result, parsed ?? new LangData());
        });

        if (sl)
        {
            StateHasChanged();   
        }
    }

    async Task AddKey()
    {
        if (newKey.IsNullOrWhiteSpace())
        {
            return;
        }

        newKey = newKey.Trim().ToBaseLatin(false).Replace(" ", "_").FirstLetterToUpper();
        
        Key localKey = new Key
        {
            Name = newKey
        };

        if (decl.Keys.TryAdd(localKey.Name, localKey))
        {
            await SaveDecl();
            inputToFocus = $"input_CS_{newKey}";
            newKey = string.Empty;
            StateHasChanged();   
        }
        else
        {
            await Js.InvokeVoidAsync("alert", $"Klíč '{localKey.Name}' už existuje");
        }
    }

    async Task SaveDecl()
    {
        string data = JsonSerializer.Serialize(decl, new JsonSerializerOptions
        {
            WriteIndented = true,
            Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        });
        await File.WriteAllTextAsync($"{basePath}/TeReo/decl.json", data);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (inputToFocus is not null)
        {
            try
            {
                await Js.Focus(inputToFocus);
                inputToFocus = null;
            }
            catch (Exception e)
            {
                
            }
        }
    }

    async Task HandleKeyUpdate(Languages language, string key, string value)
    {
        LangData lang = langsData.Langs[language];
        
        lang.Data[key] = value;
        
        if (!File.Exists($"{basePath}/TeReo/lang_{language}.json"))
        {
            await File.WriteAllTextAsync($"{basePath}/TeReo/lang_{language}.json", "{}");
        }

        if (translationMode is TranslationModes.Default)
        {
            await SaveLanguage(language);   
        }
        else
        {
            foreach (KeyValuePair<Languages, LangData> x in langsData.Langs.Where(x => x.Key != language))
            {
                x.Value.Data.TryRemove(key, out _);
            }
            
            await SaveLanguages();
        }
    }

    async Task SaveLanguage(Languages language)
    {
        string data = JsonSerializer.Serialize(langsData.Langs[language], new JsonSerializerOptions
        {
            WriteIndented = true,
            Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        });
        await File.WriteAllTextAsync($"{basePath}/TeReo/lang_{language}.json", data);
    }
    
    async Task SaveLanguages()
    {
        foreach (KeyValuePair<Languages, LangData> lang in langsData.Langs)
        {
            await SaveLanguage(lang.Key);
        }
    }

    async Task UpdateKey(string key)
    {
        string str = await Js.InvokeAsync<string>("prompt", "Nový název klíče", key);
        
        if (!str.IsNullOrWhiteSpace())
        {
            str = str.Trim();
            
            foreach (KeyValuePair<Languages, LangData> x in langsData.Langs)
            {
                if (x.Value.Data.TryGetValue(key, out string? strValue))
                {
                    x.Value.Data.TryAdd(str, strValue);
                    x.Value.Data.TryRemove(key, out _);

                    await SaveLanguage(x.Key);
                }
            }

            if (decl.Keys.TryGetValue(key, out Key? kVal))
            {
                kVal.Name = str;
                decl.Keys.TryRemove(key, out _);
                decl.Keys.TryAdd(str, kVal);


                await SaveDecl();
            }
        }
        
        StateHasChanged();
    }

    async Task Delete(string key)
    {
        bool delete = await Js.InvokeAsync<bool>("confirm", $"Potvrďte odstranění klíče '{key}'");

        if (delete)
        {
            foreach (KeyValuePair<Languages, LangData> x in langsData.Langs)
            {
                if (x.Value.Data.TryGetValue(key, out string? _))
                {
                    x.Value.Data.TryRemove(key, out _);
                    await SaveLanguage(x.Key);
                }
            }

            if (decl.Keys.TryGetValue(key, out Key? _))
            {
                decl.Keys.TryRemove(key, out _);
                await SaveDecl();
            }
            
            StateHasChanged();
        }
    }

    async Task<string> Generate()
    {
        Localizer l = new Localizer(decl, langsData);
        string code = await l.Generate();

        if (File.Exists($"{basePath}/I18N/Reo.cs"))
        {
            await File.WriteAllTextAsync($"{basePath}/I18N/Reo.cs", code);
            await Js.Toast(ToastTypes.Success, "Kód vygenerován a zapsán");
            return code;
        }
        
        generatedCode = code;
        StateHasChanged();

        return code;
    }

    static string DeeplCode(Languages lang)
    {
        return lang switch
        {
            Languages.CS => LanguageCode.Czech,
            Languages.EN => LanguageCode.EnglishAmerican,
            Languages.PL => LanguageCode.Polish,
            Languages.ES => LanguageCode.Spanish,
            Languages.SL => LanguageCode.Slovak,
            Languages.FR => LanguageCode.French,
            Languages.DE => LanguageCode.German,
            Languages.RU => LanguageCode.Russian,
            Languages.UK => LanguageCode.Ukrainian,
            Languages.PT => LanguageCode.Portuguese,
            _ => LanguageCode.English
        };
    }

    async Task GenerateMissing()
    {
        if (translating)
        {
            return;
        }
        
        translating = true;
        StateHasChanged();
        
        Translator translator = new Translator(Consts.Cfg.DeepL);
        
        foreach (KeyValuePair<string, Key> keys in decl.Keys)
        {
            foreach (KeyValuePair<Languages, LangData> x in langsData.Langs)
            {
                if (x.Key is Languages.CS)
                {
                    continue;
                }
                
                string? currentVal = null;
                bool adding = true;
                
                if (x.Value.Data.TryGetValue(keys.Key, out string? strValue))
                {
                    currentVal = strValue;
                    adding = false;
                }

                if (currentVal.IsNullOrWhiteSpace())
                {
                    if (langsData.Langs[Languages.CS].Data.TryGetValue(keys.Key, out string? csValue) && !csValue.IsNullOrWhiteSpace())
                    {
                        try
                        {
                            TextResult result = await translator.TranslateTextAsync(csValue, LanguageCode.Czech, DeeplCode(x.Key), new TextTranslateOptions
                            {
                                Context = "Aplikace pro přípravu podkladů na vyučovací hodiny",
                                TagHandling = "html"
                            });

                            if (adding)
                            {
                                x.Value.Data.TryAdd(keys.Key, result.Text);
                            }
                            else
                            {
                                x.Value.Data[keys.Key] = result.Text;
                            }
                            
                            StateHasChanged();
                        }
                        catch (Exception e)
                        {
                            
                        }
                    }
                }
            }   
        }

        await SaveLanguages();
        translating = false;
        StateHasChanged();
    }

    async Task ForceSave()
    {
        await SaveDecl();
        await SaveLanguages();
    }

    async Task AfterSearchUpdate(string val)
    {
        search = val;
        
        
    }

    async Task CycleTranslationMode()
    {
        if (translationMode < TranslationModes.Invalidate)
        {
            translationMode++;
        }
        else
        {
            translationMode = TranslationModes.Default;
        }
        
        StateHasChanged();
    }
}

<div style="display: flex; gap: 100px;">
    <div style="margin-bottom: 2rem;">
        <div style="display: flex; gap: 10px; align-items: flex-start;">
            <button style="white-space: nowrap;" class="btn btn-secondary btn-sm" @onclick="AddLanguage">Přidat jazyk</button>
            <input class="form-control form-control-sm" @bind="langCode" placeholder="Kód jazyka" />
            <button style="white-space: nowrap;" class="btn btn-secondary btn-sm"  @onclick="@(async () => await ShowLanguages(true))">Zobrazit existující jazyky</button>
        </div>

        @if (showLangs && existingFiles.Count > 0)
        {
            foreach (string lang in existingFiles)
            {
                <div>@lang</div>
            }
        }
    </div>

    <div style="margin-bottom: 1rem;">
        <button class="btn btn-secondary btn-sm" @onclick="Generate">Generovat kód</button>
        <button class="btn btn-secondary btn-sm" @onclick="GenerateMissing">Doplnit chybějící překlady</button>
        <button class="btn btn-secondary btn-sm" @onclick="ForceSave">Vynutit uložení</button>
        <button class="@($"btn btn-sm {(translationMode is TranslationModes.Invalidate ? "btn-danger" : "btn-secondary")}")" @onclick="CycleTranslationMode">Režim: @(translationMode.GetStringValue())</button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 10px; align-items: flex-start;">
        <button style="white-space: nowrap;" class="btn btn-secondary btn-sm" @onclick="AddKey">Přidat klíč</button>
        <input class="form-control form-control-sm" @bind="newKey" placeholder="Klíč" />
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 10px; align-items: flex-start;">
        <input @bind:event="oninput" @bind:set="AfterSearchUpdate" @bind:get="search" class="form-control form-control-sm" placeholder="Hledat" />
    </div>
</div>

@if (translating)
{
    <p>Probíhá překlad..</p>
}

@if (!generatedCode.IsNullOrWhiteSpace())
{
    <code>
        <pre>
        @generatedCode
        </pre>
    </code>
}

<div style="max-height: 800px; overflow: auto auto;">
    <table class="table table-sm table-bordered table-responsive">
        <thead>
        <tr>
            <td>
                <b>Akce</b>
            </td>
            <td>
                <b>Klíč</b>
            </td>

            @foreach (KeyValuePair<Languages, LangData> local in langsData.Langs.OrderBy(y => y.Key))
            {
                <td>
                    <b>@local.Key</b>
                </td>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (KeyValuePair<string, Key> x in decl.Keys.OrderBy(x => x.Key))
        {
            if (!search.IsNullOrWhiteSpace())
            {
                if (!x.Key.ToBaseLatin().Contains(search.ToBaseLatin()))
                {
                    continue;
                }       
            }
        
            <tr>
                <td style="display: flex; gap: 5px; flex-flow: nowrap;">
                    <button class="btn btn-secondary btn-sm"  @onclick="@(async () => await Delete(x.Key))">Smazat</button>
                    <button class="btn btn-secondary btn-sm"  @onclick="@(async () => await UpdateKey(x.Key))">Změnit</button>
                </td>
                <td>
                    <div>
                        <code>@x.Key</code>
                    </div>
                </td>

                @foreach (KeyValuePair<Languages, LangData> local in langsData.Langs.OrderBy(y => y.Key))
                {
                    string str = local.Value.Data.GetValueOrDefault(x.Key, string.Empty);
                    <td>
                        <div class="input-group">
                            <input id="@($"input_{local.Key}_{x.Key}")" @key="@($"input_{local.Key}_{x.Key}")" class="form-control form-control-md" @onblur="@(async () => await HandleKeyUpdate(local.Key, x.Key, str))" @bind="str"/>
                        </div>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
</div>