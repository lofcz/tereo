@page "/localize"
@page "/"
@using TeReoLocalizer.Annotations
@using TeReoLocalizer.Shared.Code
@using TeReoLocalizer.Shared.Code.Services
@using Microsoft.AspNetCore.Components.Sections
@inject IJSRuntime Js
@inject IModalService Md
@inject NavigationManager Nm
@implements IAsyncDisposable
@inherits ComponentBaseEx
@namespace TeReoLocalizer.Shared.Components.Pages
@code {
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        JsRef = DotNetObjectReference.Create(this);
    }

    protected override bool ShouldRender()
    {
        return ready && EnableRendering;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadProject();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            return;
        }

        if (!JumpingInHistory)
        {
            if (InputToFocus is not null)
            {
                try
                {
                    bool focused = await Js.Focus(InputToFocus);

                    if (focused)
                    {
                        InputToFocus = null;
                    }
                }
                catch (Exception e)
                {
                }
            }   
        }

        if (ready && !jsInitialized && contentRendered)
        {
            jsInitialized = true;

            if (Consts.Cfg.Experimental)
            {
                try
                {
                    JsObjectRef = await Js.InvokeAsync<IJSObjectReference>("import", "./Scripts/Scoped/tabulator.js");
                    await JsObjectRef.InvokeVoidAsync("Init", new
                    {
                        id = id,
                        net = JsRef,
                        decl = Decl,
                        langs = LangsData
                    });
                }
                catch (Exception e)
                {
                }
            }
            else
            {
                try
                {
                    JsObjectRefNative = await Js.InvokeAsync<IJSObjectReference>("import", "./Scripts/Scoped/native.js");
                    await JsObjectRefNative.InvokeVoidAsync("Init", new
                    {
                        id = id,
                        net = JsRef,
                        settings = Settings
                    });
                }
                catch (Exception e)
                {
                }
            }
        }
        else if (jsInitialized)
        {
            if (nativeCommands.Count > 0 && JsObjectRefNative is not null && contentRendered)
            {
                try
                {
                    List<NativeCommand> copy = [..nativeCommands];
                    nativeCommands.Clear();

                    await JsObjectRefNative.InvokeVoidAsync("ProcessCommands", new
                    {
                        id = id,
                        commands = copy
                    });
                }
                catch (Exception e)
                {
                }
            }
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (JsObjectRef is not null)
        {
            try
            {
                await JsObjectRef.InvokeVoidAsync("Destroy", new
                {
                    id = id
                });

                await JsObjectRef.DisposeAsync();
            }
            catch (Exception e)
            {
            }
        }

        if (JsObjectRefNative is not null)
        {
            try
            {
                await JsObjectRefNative.InvokeVoidAsync("Destroy", new
                {
                    id = id
                });

                await JsObjectRefNative.DisposeAsync();
            }
            catch (Exception e)
            {
            }
        }
        
        JsRef?.Dispose();
    }
}

@if (!projectLoadingFinished)
{
    return;
}

@if (Panicked)
{
    if (!showLoadErrors)
    {
        return;
    }
    
    <div>Projekt není možné načíst kvůli následujícím chybám:</div>
    <ul>
        @foreach (ProjectError x in loadErrors ?? [])
        {
            <li>@x.Message</li>
        }
    </ul>

    return;
}

<SectionContent SectionName="menuBar">
    <div class="topMenuBarContainer">
        
        @{
            List<KeyValuePair<Languages, LangData>> visible = LangsData.Langs.Where(x => x.Value.Visible).ToList();
        }
        
        <div>
            <div style="display: flex; gap: 15px;">

                <div>
                    <button @onclick="ToggleLangsSelection" style="white-space: nowrap;" class="btn btn-secondary btn-sm">Zobrazit: @(visible.Count is 0 ? "žádné jazyky" : visible.Count == LangsData.Langs.Count ? "všechny jazyky" : $"{visible.Select(x => x.Key.ToString()).ToCsv(", ")}")</button>

                    @if (showLangsSelection)
                    {
                        <div style="display: flex; gap: 15px; margin-bottom: 10px; margin-top: 10px;">
                            @foreach (KeyValuePair<Languages, LangData> local in LangsData.Langs.OrderBy(y => y.Key.ToString(), StringComparer.Ordinal))
                            {
                                <div class="form-check" @onclick="@(async () => { local.Value.Visible = !local.Value.Visible; await AfterLanguageToggle(local, local.Value.Visible); })">
                                    <input style="cursor: pointer;" @onclick:stopPropagation="true" @bind:set="@(async (value) => await AfterLanguageToggle(local, value))" @bind:get="local.Value.Visible" class="form-check-input" type="checkbox" id="@($"langShow_{local.Key}")"/>
                                    <label style="cursor: pointer; user-select: none;" class="form-check-label" for="@($"langShow_{local.Key}")">@local.Key</label>
                                </div>
                            }
                        </div>
                        
                        <div style="margin-bottom: 10px;">
                            <div style="white-space: nowrap;" class="link-light" @onclick="ToggleLangsAdd">Nastavení jazyků</div>
                        </div>
                        
                        if (showAddLangs)
                        {
                            <div style="display: flex; gap: 10px; align-items: flex-start;">
                                <input class="form-control form-control-sm" @bind="langCode" placeholder="Kód jazyka"/>
                                <button style="white-space: nowrap;" class="btn btn-secondary btn-sm" @onclick="AddLanguage">Přidat jazyk</button>
                                <button style="white-space: nowrap;" class="btn btn-danger btn-sm" @onclick="DeleteLanguage">Odebrat jazyk</button>
                            </div>   
                        }
                    }
                </div>
            </div>
        </div>
        
        <div>
            <div style="display: flex; gap: 10px; align-items: flex-start;">
                <input @bind:event="oninput" @bind:set="AfterSearchUpdate" @bind:get="KeySearch" class="form-control form-control-sm" placeholder="Hledat"/>
                <button @onclick="ToggleSearchModeSelection" style="white-space: nowrap;" class="btn btn-secondary btn-sm">Režim: @(Settings.KeySearchLang is null ? "klíč" : Settings.KeySearchLang.ToString()) @Settings.KeySearchMode.GetStringValue().FirstLetterToLower()</button>
            </div>

            @if (renderSearchModeSelection)
            {
                <div style="display: flex; gap: 10px; align-items: flex-start; flex-flow: column; margin-top: 10px;">
                    <div style="width: 100%;">
                        <div style="display: flex; gap: 10px; flex-flow: wrap;">
                            <select style="width: 160px;" @onchange="HandleKeySearchValueChange" class="form-select">
                                <option value="null" id="lang_search_key_name" selected="@(Settings.KeySearchLang is null)">Název klíče</option>

                                @foreach (KeyValuePair<Languages, LangData> local in LangsData.Langs.OrderBy(y => y.Key))
                                {
                                    <option value="@local.Key" id="lang_search_value_@local.Key" selected="@(Settings.KeySearchLang == local.Key)">Překlad @local.Key</option>
                                }
                            </select>

                            <EdCheckbox OnUpdate="@(async (sender) => await HandleKeySearchValueChange(null))" @bind-Value="Settings.KeySearchAllGroups" Label="Všechny skupiny" />
                        </div>

                        <div style="height: 6px;"></div>

                        <div class="form-check">
                            <input checked="@(Settings.KeySearchMode is KeySearchModes.Contains)" @onchange="@(async () => await KeySearchModeSelected(KeySearchModes.Contains))" class="form-check-input" id="searchTypeContains" type="radio" name="searchType"/>
                            <label class="form-check-label" for="searchTypeContains">@KeySearchModes.Contains.GetStringValue()</label>
                        </div>

                        <div class="form-check">
                            <input checked="@(Settings.KeySearchMode is KeySearchModes.Exact)" @onchange="@(async () => await KeySearchModeSelected(KeySearchModes.Exact))" class="form-check-input" id="searchTypeExact" type="radio" name="searchType"/>
                            <label class="form-check-label" for="searchTypeExact">@KeySearchModes.Exact.GetStringValue()</label>
                        </div>
                    </div>
                </div>
            }

        </div>

        <div style="display: flex; flex-flow: wrap; align-items: flex-start; gap: 5px; justify-content: flex-start; row-gap: 5px; height: fit-content;">
            <button class="btn btn-secondary btn-sm" @onclick="Generate">Generovat kód</button>
            <button class="btn btn-secondary btn-sm" @onclick="GenerateMissing">Doplnit chybějící překlady</button>
            <button class="btn btn-secondary btn-sm" @onclick="ForceSave">@(Settings.AutoSave ? "Vynutit uložení" : "Uložit změny")</button>
            <button class="@($"btn btn-sm {(Settings.TranslationMode is TranslationModes.Invalidate ? "btn-danger" : "btn-secondary")}")" @onclick="CycleTranslationMode">Zápis: @(Settings.TranslationMode.GetStringValue().FirstLetterToLower())</button>
        </div>

        <div style="display: flex; gap: 10px; align-items: flex-start;">
            <div style="display: flex; gap: 5px;">
                <button title="Zpět" class="btn btn-secondary btn-sm @(CommandManager.CanUndo ? string.Empty : "visuallyDisabled")" @onclick="Undo">
                    <img ondragstart="return false;" width="24" height="24" src="/Images/Svg/undo.svg" alt=""/>
                </button>
                <button title="Dopředu" class="btn btn-secondary btn-sm @(CommandManager.CanRedo ? string.Empty : "visuallyDisabled")" @onclick="Redo">
                    <img ondragstart="return false;" width="24" height="24" src="/Images/Svg/redo.svg" alt=""/>
                </button>

                @if (CommandManager.AnyHistory)
                {
                    <button class="btn btn-secondary btn-sm" @onclick="ShowHistory">Historie</button>
                }
            </div>
        </div>

        <div style="display: flex; gap: 10px; align-items: flex-start; flex: 1;">
            <button style="white-space: nowrap;" class="btn btn-secondary btn-sm" @onclick="AddKey">Přidat klíč</button>
            <input class="form-control form-control-sm" @bind="NewKey" @onkeyup="@(async (args) => await HandleKeyAddKeyPressed(args))" placeholder="Klíč"/>
        </div>
    </div>
</SectionContent>

@if (Translating)
{
    <p>Probíhá překlad @(Translated)/@(ToTranslate.Count)</p>
}

<div id="@id"></div>

@if (ready && !Consts.Cfg.Experimental)
{
    <div style="max-height: 800px; overflow: auto;">
        <table id="@($"table_{id}")" class="table table-sm table-bordered table-responsive tableMain tableSticky">
            <thead>
            <tr>
                <th style="width: 125px;">
                    <b>Akce</b>
                </th>
                <th data-rtc-resizable="key" style="width: 300px;">
                    <b>Klíč</b>
                </th>

                @foreach (KeyValuePair<Languages, LangData> local in LangsData.Langs.OrderBy(y => y.Key))
                {
                    if (!local.Value.Visible)
                    {
                        continue;
                    }

                    <th data-rtc-resizable="@local.Key">
                        <b>@local.Key</b>
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (KeyValuePair<string, Key> x in visibleKeys)
            {
                <tr>
                    <td>
                        <div>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-strategy="fixed" data-bs-boundary="window">Zobrazit akce</button>
                                <ul class="dropdown-menu">
                                    <li>
                                        <span style="cursor: pointer; user-select: none;" class="dropdown-item" @onclick="@(async () => await RenameKey(x.Value))">Přejmenovat</span>
                                    </li>

                                    <li>
                                        <span style="cursor: pointer; user-select: none;" class="dropdown-item" @onclick="@(async () => await RegenerateKey(x.Value))">Přegenerovat název klíče</span>
                                    </li>

                                    <li>
                                        <span style="cursor: pointer; user-select: none;" class="dropdown-item" @onclick="@(async () => await OpenSettingsKey(x.Value))">Nastavení</span>
                                    </li>

                                    @if (Project.Decls.Count > 1)
                                    {
                                        <li>
                                            <span style="cursor: pointer; user-select: none;" class="dropdown-item" @onclick="@(async () => await MoveKey(x.Value))">Přesunout</span>
                                        </li>
                                    }

                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>
                                    <li>
                                        <span style="cursor: pointer; user-select: none;" class="dropdown-item" @onclick="@(async () => await Delete(x.Value))">Odstranit</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </td>
                    <td style="width: 300px;">
                        <div style="max-width: 300px;">
                            <code>@x.Key</code>

                            @if (!x.Value.AutoTranslatable)
                            {
                                <div>
                                    <code style="font-size: 12px;">[Manuální překlad]</code>
                                </div>
                            }
                            
                            @if (Settings.KeySearchAllGroups)
                            {
                                <div>
                                    <code style="font-size: 12px; color: #FF851B;">[Skupina: @x.Value.Owner.Name]</code>
                                </div>
                            }
                        </div>
                    </td>

                    @foreach (KeyValuePair<Languages, LangData> local in LangsData.Langs.OrderBy(y => y.Key.ToString(), StringComparer.Ordinal))
                    {
                        if (!local.Value.Visible)
                        {
                            continue;
                        }

                        string str = local.Value.Data.GetValueOrDefault(x.Key, string.Empty);
                        string langKey = local.Key.ToString().ToLowerInvariant();

                        <td>
                                <div style="position: relative;" class="keyEditorWrapper input-group">

                                    @if (Settings.RenderMode is RenderModes.Input)
                                    {
                                        <input lang="@langKey" data-gramm="false" data-gramm_editor="false" data-enable-grammarly="false" @key="@($"input_{local.Key}_{x.Key}")" id="@($"input_{local.Key}_{x.Key}")" class="form-control form-control-md" @onfocus="@(() => HandleKeyFocus(local.Key, x.Key, str))"  @onblur="@(async () => await HandleKeyUpdate(local.Key, x.Key, str))" @bind="str" @bind:after="@(() => SetKeyValue(local.Key, x.Key, str))"/>
                                    }
                                    else
                                    {
                                        <textarea style="padding-right: 20px;" lang="@langKey" data-gramm="false" data-gramm_editor="false" data-enable-grammarly="false" @key="@($"input_{local.Key}_{x.Key}")" id="@($"input_{local.Key}_{x.Key}")" class="keyEditorTextarea form-control form-control-md" @onfocus="@(() => HandleKeyFocus(local.Key, x.Key, str))" @onblur="@(async () => await HandleKeyUpdate(local.Key, x.Key, str))" @bind="str" @bind:after="@(() => SetKeyValue(local.Key, x.Key, str))"></textarea>
                                        <div @onmousedown="@(async () => await HandleEditorClick(local.Key, x.Key, str))" @onclick:stopPropagation="true" style="position: absolute; right: 2px; top: 2px; z-index: 10; width: 14px; height: 14px;" title="Otevřít v editoru" class="keyEditorIcon keyEditorIconElement svg-icon" >
                                            <svg style="vertical-align: top;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M432.4 787.2c-24.1 27.6-34.7 34.2-68.4 46.6-51.9 19.4-147 55.1-208.9 78.3-11.7 4.6-55.9 2.3-37.4-41.1 21-60.4 51.8-149.6 69.4-200.5 12.8-35.9 17.9-45.2 43.7-69.3l266.5-266.5L686 523.4C686 523.4 506.6 710.1 432.4 787.2z"  /><path d="M726.5 482.9 537.9 294.3 578.3 253.8 767 442.5Z"  /><path d="M888.3 321.2l-80.8 80.9L618.8 213.4l80.9-80.8c29.8-29.8 78-29.8 107.8 0l80.9 80.8C918.1 243.1 918.1 291.4 888.3 321.2z"  /></svg>
                                        </div>
                                    }
                                </div>
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>

    if (!contentRendered)
    {
        contentRendered = true;
        StateHasChanged();
    }
}

@if (ready)
{
    <div class="bottomMenuBar" style="margin-top: 1rem; display: flex; gap: 100px; flex-flow: wrap; row-gap: 0;">
        <div>
            <div style="width: 280px;">
                <div style="margin-bottom: 5px;">
                    <select @onchange="HandleActiveDeclChange" class="form-select">
                        @foreach (Decl x in Project.Decls)
                        {
                            <option value="@x.Id" selected="@(x == Decl)">@(x.Name.IsNullOrWhiteSpace() ? "Skupina bez názvu" : $"{x.Name} (klíčů: {x.Keys.Count})")</option>
                        }
                    </select>
                </div>
                
                <div @onclick="ToggleGroupSettings" style="margin-bottom: 10px;" class="link-light">Správa skupin</div>
                
                @if (showGroupSettings)
                {
                    <div style="display: flex; flex-flow: wrap; gap: 5px; margin-bottom: 5px;">
                        <button class="@($"btn btn-sm btn-secondary")" @onclick="RenameDecl">Přejmenovat skupinu</button>
                        <button class="@($"btn btn-sm btn-secondary")" @onclick="AddDecl">Přidat skupinu</button>
                        <button class="@($"btn btn-sm btn-secondary")" @onclick="EditDecl">Upravit skupinu</button>
                        <button class="@($"btn btn-sm btn-danger")" @onclick="DeleteDecl">Odstranit skupinu</button>
                    </div>   
                }
            </div>
        </div>

        <div style="width: 250px;">
            <button class="@($"btn btn-sm btn-secondary")" @onclick="CycleInputMode">Zobrazení: @(Settings.RenderMode.GetStringValue().FirstLetterToLower())</button>
        </div>

        <div style="display: flex; gap: 20px; flex: 1; flex-flow: wrap;">
            <div style="display: flex; justify-content: flex-start; flex: 1; align-items: flex-start; gap: 20px; flex-flow: wrap;">
                <div style="display: flex; gap: 15px;">
                    <div title="0 pro zobrazení všech klíčů" style="white-space: nowrap; cursor: help; margin-top: auto; margin-bottom: auto;" class="form-label">Zobrazit klíčů:</div>
                    <input style="width: 100px;" type="number" class="form-control" id="limitRender" @bind:set="AfterLimitUpdate" @bind:get="Settings.LimitRender">
                </div>

                @if (keyPages > 1)
                {
                    <div class="d-flex align-items-center flex-wrap">
                        <div class="me-2">Strana:</div>
                        <ul class="pagination flex-wrap me-3" style="margin-bottom: 0;">
                            @{
                                int offset = 3;
                                
                                int start = Math.Max(1, keySelectedPage - offset);
                                int end = Math.Min(keyPages, keySelectedPage + offset);

                                if (start > 1)
                                {
                                    <li style="user-select: none; cursor: pointer;" class="page-item">
                                        <span class="page-link" @onclick="@(async () => await SetKeyPage(1))">1</span>
                                    </li>

                                    if (start > 2)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                }

                                for (int i = start; i <= end; i++)
                                {
                                    int pageIndex = i;
                                    <li style="user-select: none; cursor: pointer;" @onclick="@(async () => await SetKeyPage(pageIndex))" class="page-item @(pageIndex == keySelectedPage ? "active" : string.Empty)">
                                        <span class="page-link">@pageIndex</span>
                                    </li>
                                }

                                if (end < keyPages)
                                {
                                    if (end < keyPages - 1)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }

                                    <li style="user-select: none; cursor: pointer;" class="page-item">
                                        <span class="page-link" @onclick="@(async () => await SetKeyPage(keyPages))">@keyPages</span>
                                    </li>
                                }
                            }
                        </ul>
                        <div class="d-flex align-items-center">
                            <input type="number" class="form-control me-2" style="width: 120px;" placeholder="Stránka" @ref="jumpToPageInput" id="pageJumpEl" min="1" max="@keyPages"/>
                            <button class="btn btn-outline-primary" @onclick="SetKeyPageJump">Přejít</button>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div style="margin-left: auto; margin-right: 40px;">
            <div style="display: flex; flex-flow: wrap; gap: 5px; margin-bottom: 1rem;">
                <button class="btn btn-secondary btn-sm" @onclick="ShowAppSettings">Nastavení</button>
            </div>

            @if (synchronizingIndex)
            {
                <div style="margin-left: auto;">
                    <div>Probíhá synchronizace indexu..</div>
                </div>
            }
        </div>

    </div>
}