@page "/localize"
@using System.Collections.Concurrent
@using System.Diagnostics
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Json
@using System.Text.Unicode
@using Blazored.Modal.Services
@using DeepL
@using DeepL.Model
@using TeReoLocalizer.Annotations
@using TeReoLocalizer.Shared.Code
@using TeReoLocalizer.Shared.Code.Services
@using TeReoLocalizer.Shared.Components.Pages.Owned
@inject IJSRuntime Js
@inject IModalService Md
@implements IAsyncDisposable
@inherits ComponentBaseEx
@code {
    
    public Project Project = new Project();
    public Decl Decl => Project.SelectedDecl;

    InvertedIndex Index => Program.Index;

    DotNetObjectReference<Localize>? JsRef { get; set; }
    IJSObjectReference? JsObjectRef;
    IJSObjectReference? JsObjectRefNative;
    
    string langCode = "";
    string basePath = AppDomain.CurrentDomain.BaseDirectory;
    List<string> existingFiles = [];
    string newKey = "";
    readonly LangsData langsData = new LangsData();
    bool showLangs;
    string? generatedCode;
    bool ready;
    bool translating;
    string search = string.Empty;
    string? inputToFocus;
    bool synchronizingIndex;
    string id = General.IIID();
    bool jsInitialized;
    List<NativeCommand> nativeCommands = [];
    UserSettings userSettings = new UserSettings();
    List<KeyValuePair<string, Key>> visibleKeys = [];
    int keyPages = -1;
    int keySelectedPage = 1;
    ElementReference? jumpToPageInput;
    

    class UserSettings
    {
        public List<Languages>? ShowLangs { get; set; }
        public RenderModes RenderMode { get; set; } = RenderModes.Input;
        public TranslationModes TranslationMode { get; set; } = TranslationModes.Default;
        public int LimitRender { get; set; }
        public string? SelectedDecl { get; set; }
    }
    
    class NativeCommand
    {
        public NativeCommands Type { get; set; }
        public object? Data { get; set; }
    }
    
    enum NativeCommands
    {
        Unknown,
        SetTextareaHeight
    }

    enum RenderModes
    {
        Unknown,
        [StringValue("Jednořádkový text")] 
        Input,
        [StringValue("Víceřádkový text")]
        Textarea
    }
    
    enum TranslationModes
    {
        Unknown,
        [StringValue("Výchozí")] 
        Default,
        [StringValue("Zneplatnění")] 
        Invalidate
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        JsRef = DotNetObjectReference.Create(this);
    }

    protected override bool ShouldRender()
    {
        return ready;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!Consts.Cfg.Repository.IsNullOrWhiteSpace())
        {
            basePath = Consts.Cfg.Repository;
        }

        await base.OnInitializedAsync();
        await ShowLanguages(false);

        if (!Directory.Exists($"{basePath}/TeReo"))
        {
            Directory.CreateDirectory($"{basePath}/TeReo");
        }

        if (File.Exists($"{basePath}/TeReo/project.json"))
        {
            string currentData = await File.ReadAllTextAsync($"{basePath}/TeReo/project.json");
            Project = JsonSerializer.Deserialize<Project>(currentData) ?? new Project();
        }

        Project.SelectedDecl = Project.Decls.FirstOrDefault() ?? new Decl();

        if (File.Exists($"{basePath}/TeReo/userSettings.json"))
        {
            userSettings = (await File.ReadAllTextAsync($"{basePath}/TeReo/userSettings.json")).JsonDecode<UserSettings>() ?? userSettings;

            if (userSettings.ShowLangs is not null)
            {
                foreach (KeyValuePair<Languages, LangData> x in langsData.Langs)
                {
                    x.Value.Visible = userSettings.ShowLangs.Contains(x.Key);
                }
            }
        }

        if (Consts.Cfg.Experimental)
        {
            synchronizingIndex = true;

            AsyncService.Fire(async () =>
            {
                Index.SynchronizeIndex(Decl.Keys.Select(x => new IndexDocument
                {
                    Id = x.Value.Id,
                    Content = x.Value.Name
                }).ToList());

                synchronizingIndex = false;
                StateHasChanged();
            });
        }

        if (!userSettings.SelectedDecl.IsNullOrWhiteSpace())
        {
            Decl? matchingDecl = Project.Decls.FirstOrDefault(x => x.Id == userSettings.SelectedDecl);

            if (matchingDecl is not null)
            {
                Project.SelectedDecl = matchingDecl;
            }
        }

        RecomputeVisibleKeys();
        ready = true;
    }

    async Task AddLanguage()
    {
        if (!File.Exists($"{basePath}/TeReo/lang_{langCode}.json"))
        {
            await File.WriteAllTextAsync($"{basePath}/TeReo/lang_{langCode}.json", "{}");

            await ShowLanguages(false);
            StateHasChanged();
        }
        else
        {
            await Js.InvokeVoidAsync("alert", $"Jazyk '{langCode}' je již přidán");
        }
    }

    async Task ShowLanguages(bool sl)
    {
        if (sl)
        {
            showLangs = true;
        }

        existingFiles = Directory.GetFiles($"{basePath}/TeReo").ToList();

        await Parallel.ForEachAsync(existingFiles, async (str, ctx) =>
        {
            string lang = Path.GetFileName(str).Replace(".json", string.Empty).Replace("lang_", string.Empty);

            if (!Enum.TryParse(lang, out Languages result))
            {
                return;
            }

            string data = await File.ReadAllTextAsync(str, ctx);
            LangData? parsed = JsonSerializer.Deserialize<LangData>(data);

            langsData.Langs.TryAdd(result, parsed ?? new LangData());
        });

        if (sl)
        {
            StateHasChanged();
        }
    }

    async Task AddKey()
    {
        if (newKey.IsNullOrWhiteSpace())
        {
            return;
        }

        string newKeyCopy = newKey.Trim().FirstLetterToUpper();
        string baseKey = newKey;

        newKeyCopy = Localizer.BaseIdentifier(newKeyCopy);

        Key localKey = new Key
        {
            Name = newKeyCopy,
            Id = General.IIID()
        };

        if (Decl.Keys.TryAdd(localKey.Name, localKey))
        {
            await SaveProject();

            if (newKeyCopy != baseKey)
            {
                await SetKey(Languages.CS, newKeyCopy, baseKey);
            }

            if (!search.IsNullOrWhiteSpace() && !search.Contains(newKeyCopy))
            {
                search = string.Empty;
            }

            foreach (Decl pDecl in Project.Decls)
            {
                foreach (KeyValuePair<string, Key> x in pDecl.Keys)
                {
                    x.Value.IsVisible = true;
                }   
            }
            
            newKey = string.Empty;
            inputToFocus = $"input_CS_{newKeyCopy}";
            RecomputeVisibleKeys(true, newKeyCopy);
            StateHasChanged();
        }
        else
        {
            await Js.InvokeVoidAsync("alert", $"Klíč '{localKey.Name}' už existuje");
        }
    }

    async Task SaveProject()
    {
        string data = Project.ToJson(true);
        await File.WriteAllTextAsync($"{basePath}/TeReo/project.json", data);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (inputToFocus is not null)
        {
            try
            {
                await Js.Focus(inputToFocus);
                inputToFocus = null;
            }
            catch (Exception e)
            {
            }
        }

        if (ready && !jsInitialized)
        {
            jsInitialized = true;

            if (Consts.Cfg.Experimental)
            {
                try
                {
                    JsObjectRef = await Js.InvokeAsync<IJSObjectReference>("import", "./Scripts/Scoped/tabulator.js");
                    await JsObjectRef.InvokeVoidAsync("Init", new
                    {
                        id = id,
                        net = JsRef,
                        decl = Decl,
                        langs = langsData
                    });
                }
                catch (Exception e)
                {
                }   
            }
            else
            {
                try
                {
                    JsObjectRefNative = await Js.InvokeAsync<IJSObjectReference>("import", "./Scripts/Scoped/native.js");
                    await JsObjectRefNative.InvokeVoidAsync("Init", new
                    {
                        id = id,
                        net = JsRef,
                        settings = userSettings
                    });
                }
                catch (Exception e)
                {
                }   
            }
        }
        else if (jsInitialized)
        {
            if (nativeCommands.Count > 0 && JsObjectRefNative is not null)
            {
                try
                {
                    List<NativeCommand> copy = [..nativeCommands];
                    nativeCommands.Clear();
                    
                    await JsObjectRefNative.InvokeVoidAsync("ProcessCommands", new
                    {
                        id = id,
                        commands = copy
                    });
                }
                catch (Exception e)
                {
                    
                }
            }
        }
    }

    async Task SetKey(Languages language, string key, string value)
    {
        LangData lang = langsData.Langs[language];

        lang.Data[key] = value;

        if (!File.Exists($"{basePath}/TeReo/lang_{language}.json"))
        {
            await File.WriteAllTextAsync($"{basePath}/TeReo/lang_{language}.json", "{}");
        }

        if (userSettings.TranslationMode is TranslationModes.Default)
        {
            await SaveLanguage(language);
        }
        else
        {
            foreach (KeyValuePair<Languages, LangData> x in langsData.Langs.Where(x => x.Key != language))
            {
                x.Value.Data.TryRemove(key, out _);
            }

            await SaveLanguages();
        }
    }

    void RecomputeVisibleKeys(bool resetPaging = false, string? keyToFocus = null)
    {
        visibleKeys.Clear();

        if (resetPaging)
        {
            keySelectedPage = 1;
            keyPages = 0;
        }

        if (userSettings.LimitRender <= 0)
        {
            foreach (KeyValuePair<string, Key> x in Decl.Keys.OrderBy(x => x.Key))
            {
                if (x.Value.IsVisible)
                {
                    visibleKeys.Add(x);   
                }
            }   
        }
        else
        {
            List<KeyValuePair<string, Key>> keys = Decl.Keys.OrderBy(x => x.Key).Where(x => x.Value.IsVisible).ToList();
            keyPages = (int)Math.Ceiling(keys.Count / (double)userSettings.LimitRender);
            int take = userSettings.LimitRender;
            
            if (keyToFocus is not null)
            {
                if (Decl.Keys.TryGetValue(keyToFocus, out Key? match))
                {
                    int index = keys.BinarySearch(new KeyValuePair<string, Key>(keyToFocus, match), Comparer<KeyValuePair<string, Key>>.Create((a, b) => string.CompareOrdinal(a.Key, b.Key)));

                    if (index < 0)
                    {
                        index = ~index;
                    }
                    
                    int indexPage = (int)Math.Ceiling(index / (double)take);
                    keySelectedPage = indexPage;
                }
            }
            
            int skip = userSettings.LimitRender * (keySelectedPage - 1);
            
            foreach (KeyValuePair<string, Key> x in keys.Skip(skip).Take(take))
            {
                visibleKeys.Add(x);
            }

            if (userSettings.RenderMode is RenderModes.Textarea)
            {
                nativeCommands.Add(new NativeCommand
                {
                    Type = NativeCommands.SetTextareaHeight
                });   
            }
        }
    }

    async Task HandleKeyUpdate(Languages language, string key, string value)
    {
        await SetKey(language, key, value);
    }

    async Task SaveLanguage(Languages language)
    {
        string data = langsData.Langs[language].ToJson();
        await File.WriteAllTextAsync($"{basePath}/TeReo/lang_{language}.json", data);
    }

    async Task SaveLanguages()
    {
        foreach (KeyValuePair<Languages, LangData> lang in langsData.Langs)
        {
            await SaveLanguage(lang.Key);
        }
    }

    async Task MoveKey(string key)
    {
        Md.ShowModal<LocalizeMoveKeyModal>(new
        {
            Name = key,
            Owner = this
        });
    }

    async Task UpdateKey(string key)
    {
        Md.ShowPromptModal("Nový název klíče", null, async (str) =>
        {
            if (!str.IsNullOrWhiteSpace())
            {
                str = str.Trim();

                foreach (KeyValuePair<Languages, LangData> x in langsData.Langs)
                {
                    if (x.Value.Data.TryGetValue(key, out string? strValue))
                    {
                        x.Value.Data.TryAdd(str, strValue);
                        x.Value.Data.TryRemove(key, out _);

                        await SaveLanguage(x.Key);
                    }
                }

                if (Decl.Keys.TryGetValue(key, out Key? kVal))
                {
                    kVal.Name = str;
                    Decl.Keys.TryRemove(key, out _);
                    Decl.Keys.TryAdd(str, kVal);

                    RecomputeVisibleKeys();
                    await SaveProject();
                }

                if (!search.Contains(str))
                {
                    search = string.Empty;
                }

                inputToFocus = str;
            }

            StateHasChanged();
        }, defaultText: key, inputPlaceholder: "Nový název klíče");
    }

    async Task Delete(string key)
    {
        Md.ShowConfirmActionModal($"Potvrďte odstranění klíče <code>{key}</code>",  async () =>
        {
            foreach (KeyValuePair<Languages, LangData> x in langsData.Langs)
            {
                if (x.Value.Data.TryGetValue(key, out string? _))
                {
                    x.Value.Data.TryRemove(key, out _);
                    await SaveLanguage(x.Key);
                }
            }

            if (Decl.Keys.TryGetValue(key, out Key? _))
            {
                Decl.Keys.TryRemove(key, out _);
                await SaveProject();
            }

            RecomputeVisibleKeys();
            StateHasChanged();
        });
       
    }

    async Task<string> Generate()
    {
        Localizer l = new Localizer(Decl, langsData);
        string code = await l.Generate();

        if (File.Exists($"{basePath}/I18N/Reo.cs"))
        {
            await File.WriteAllTextAsync($"{basePath}/I18N/Reo.cs", code);
            await Js.Toast(ToastTypes.Success, "Kód vygenerován a zapsán");
            return code;
        }

        generatedCode = code;
        StateHasChanged();

        return code;
    }

    static string DeeplCode(Languages lang)
    {
        return lang switch
        {
            Languages.CS => LanguageCode.Czech,
            Languages.EN => LanguageCode.EnglishAmerican,
            Languages.PL => LanguageCode.Polish,
            Languages.ES => LanguageCode.Spanish,
            Languages.SL => LanguageCode.Slovak,
            Languages.FR => LanguageCode.French,
            Languages.DE => LanguageCode.German,
            Languages.RU => LanguageCode.Russian,
            Languages.UK => LanguageCode.Ukrainian,
            Languages.PT => LanguageCode.Portuguese,
            _ => LanguageCode.English
        };
    }

    async Task GenerateMissing()
    {
        if (translating)
        {
            return;
        }

        translating = true;
        StateHasChanged();

        Translator translator = new Translator(Consts.Cfg.DeepL);

        foreach (KeyValuePair<string, Key> keys in Decl.Keys)
        {
            foreach (KeyValuePair<Languages, LangData> x in langsData.Langs)
            {
                if (x.Key is Languages.CS)
                {
                    continue;
                }

                string? currentVal = null;
                bool adding = true;

                if (x.Value.Data.TryGetValue(keys.Key, out string? strValue))
                {
                    currentVal = strValue;
                    adding = false;
                }

                if (currentVal.IsNullOrWhiteSpace())
                {
                    if (langsData.Langs[Languages.CS].Data.TryGetValue(keys.Key, out string? csValue) && !csValue.IsNullOrWhiteSpace())
                    {
                        try
                        {
                            TextResult result = await translator.TranslateTextAsync(csValue, LanguageCode.Czech, DeeplCode(x.Key), new TextTranslateOptions
                            {
                                Context = "Aplikace pro přípravu podkladů na vyučovací hodiny",
                                TagHandling = "html"
                            });

                            if (adding)
                            {
                                x.Value.Data.TryAdd(keys.Key, result.Text);
                            }
                            else
                            {
                                x.Value.Data[keys.Key] = result.Text;
                            }

                            StateHasChanged();
                        }
                        catch (Exception e)
                        {
                        }
                    }
                }
            }
        }

        await SaveLanguages();
        translating = false;
        StateHasChanged();
    }

    async Task ForceSave()
    {
        await SaveProject();
        await SaveLanguages();
    }

    async Task AfterSearchUpdate(string val)
    {
        search = val;

        if (Consts.Cfg.Experimental)
        {
            foreach (KeyValuePair<string, Key> x in Decl.Keys)
            {
                x.Value.IsVisible = false;
            }

            List<SearchResult> results = Index.Search(search.ToBaseLatin());
            return;
        }

        foreach (KeyValuePair<string, Key> x in Decl.Keys)
        {
            x.Value.IsVisible = x.Key.ToLowerInvariant().Contains(search.ToBaseLatin());
        }
        
        RecomputeVisibleKeys(true);
        StateHasChanged();
    }

    async Task CycleTranslationMode()
    {
        if (userSettings.TranslationMode < TranslationModes.Invalidate)
        {
            userSettings.TranslationMode++;
        }
        else
        {
            userSettings.TranslationMode = TranslationModes.Default;
        }

        StateHasChanged();
    }
    
    async Task CycleInputMode()
    {
        if (userSettings.RenderMode < RenderModes.Textarea)
        {
            userSettings.RenderMode++;
            nativeCommands.Add(new NativeCommand
            {
                Type = NativeCommands.SetTextareaHeight
            });
        }
        else
        {
            userSettings.RenderMode = RenderModes.Input;
        }

        StateHasChanged();
        await SaveUserSettings();
    }


    public async ValueTask DisposeAsync()
    {
        if (JsObjectRef is not null)
        {
            try
            {
                await JsObjectRef.InvokeVoidAsync("Destroy", new
                {
                    id = id
                });

                await JsObjectRef.DisposeAsync();
            }
            catch (Exception e)
            {
            }
        }
        
        if (JsObjectRefNative is not null)
        {
            try
            {
                await JsObjectRefNative.InvokeVoidAsync("Destroy", new
                {
                    id = id
                });

                await JsObjectRefNative.DisposeAsync();
            }
            catch (Exception e)
            {
            }
        }


        JsRef?.Dispose();
    }

    async Task AfterLanguageToggle(KeyValuePair<Languages, LangData> local, bool visible)
    {
        local.Value.Visible = visible;
        userSettings.ShowLangs = langsData.Langs.Where(x => x.Value.Visible).Select(x => x.Key).ToList();
        await SaveUserSettings();
    }

    async Task AfterLimitUpdate(int value)
    {
        userSettings.LimitRender = value;
        RecomputeVisibleKeys(true);
        StateHasChanged();
        await SaveUserSettings();
    }

    async Task SetKeyPage(int page)
    {
        keySelectedPage = page;
        RecomputeVisibleKeys();
        StateHasChanged();
    }
    
    async Task SetKeyPageJump()
    {
        string jumpToPageValue = await Js.InvokeAsync<string>("eval", $"document.getElementById('pageJumpEl').value");
        
        if (int.TryParse(jumpToPageValue, out int pageNumber) && pageNumber >= 1 && pageNumber <= keyPages)
        {
            await SetKeyPage(pageNumber);
            await Js.InvokeVoidAsync("eval", $"document.getElementById('pageJumpEl').value = ''");
        }
    }

    async Task SaveUserSettings()
    {
        await File.WriteAllTextAsync($"{basePath}\\TeReo\\userSettings.json", userSettings.ToJson());
    }

    async Task RenameDecl()
    {
        string str = await Js.InvokeAsync<string>("prompt", "Nový název skupiny", Decl.Name.IsNullOrWhiteSpace() ? string.Empty : Decl.Name);

        if (!str.IsNullOrWhiteSpace())
        {
            Decl.Name = str;
            await SaveProject();
        }
    }

    async Task AddDecl()
    {
        string str = await Js.InvokeAsync<string>("prompt", "Název skupiny");

        if (!str.IsNullOrWhiteSpace())
        {
            string declId = General.IIID();
            
            Decl newDecl = new Decl
            {
                Name = str,
                Id = declId,
                Keys = []
            };
            
            Project.Decls.Add(newDecl);
            Project.SelectedDecl = newDecl;
            await SaveProject();

            userSettings.SelectedDecl = declId;
            await SaveUserSettings();
        }
    }

    async Task DeleteDecl()
    {
        if (Project.Decls.Count <= 1)
        {
            await Js.Toast(ToastTypes.Error, "Skupinu je možné odstranit pouze pokud projekt obsahuje více než jednu skupinu");
            return;
        }
        
        bool delete = await Js.InvokeAsync<bool>("confirm", $"Potvrďte odstranění skupiny '{Decl.Name}' (klíčů: {Decl.Keys.Count})");

        if (delete)
        {
            Project.Decls.Remove(Decl);
            Project.SelectedDecl = Project.Decls.FirstOrDefault() ?? new Decl();
            await SaveProject();
            
            userSettings.SelectedDecl = Project.SelectedDecl.Id;
            await SaveUserSettings();
            
            RecomputeVisibleKeys();
            StateHasChanged();
        }
    }

    async Task HandleActiveDeclChange(ChangeEventArgs args)
    {
        if (args.Value is string str)
        {
            Decl? matchingDecl = Project.Decls.FirstOrDefault(x => x.Id == str);

            if (matchingDecl is not null)
            {
                Project.SelectedDecl = matchingDecl;
                userSettings.SelectedDecl = str;
                await SaveUserSettings();

                if (search.IsNullOrWhiteSpace())
                {
                    foreach (KeyValuePair<string, Key> x in Decl.Keys)
                    {
                        x.Value.IsVisible = true;
                    }
                }
                else
                {
                    foreach (KeyValuePair<string, Key> x in Decl.Keys)
                    {
                        x.Value.IsVisible = x.Key.ToLowerInvariant().Contains(search.ToBaseLatin());
                    }
                }
                
                RecomputeVisibleKeys(true);
                StateHasChanged();
            }
        }
    }

    public async Task TransferKey(string keyName, Decl newOwner)
    {
        if (Decl.Keys.TryRemove(keyName, out Key? key))
        {
            newOwner.Keys.TryAdd(keyName, key);

            await SaveProject();
            RecomputeVisibleKeys();
            StateHasChanged();
        }
    }
}

<div style="display: flex; gap: 100px;">

    @if (false)
    {
        <div style="margin-bottom: 2rem;">
            <div style="display: flex; gap: 10px; align-items: flex-start;">
                <button style="white-space: nowrap;" class="btn btn-secondary btn-sm" @onclick="AddLanguage">Přidat jazyk</button>
                <input class="form-control form-control-sm" @bind="langCode" placeholder="Kód jazyka"/>
                <button style="white-space: nowrap;" class="btn btn-secondary btn-sm" @onclick="@(async () => await ShowLanguages(true))">Zobrazit existující jazyky</button>
            </div>

            @if (showLangs && existingFiles.Count > 0)
            {
                foreach (string lang in existingFiles)
                {
                    <div>@lang</div>
                }
            }
        </div>
    }
    else
    {
        if (langsData.Langs.Count is 0)
        {
            <div>Lokalizace se načítá..</div>
        }
        else
        {
            <div style="margin-bottom: 2rem;">
                <div style="display: flex; gap: 15px;">
                    <div>Zobrazit:</div>
                    @foreach (KeyValuePair<Languages, LangData> local in langsData.Langs.OrderBy(y => y.Key))
                    {
                        <div class="form-check">
                            <input style="cursor: pointer;" @bind:set="@(async (value) => await AfterLanguageToggle(local, value))" @bind:get="local.Value.Visible" class="form-check-input" type="checkbox" id="@($"langShow_{local.Key}")"/>
                            <label style="cursor: pointer; user-select: none;" class="form-check-label" for="@($"langShow_{local.Key}")">@local.Key</label>
                        </div>
                    }
                </div>
            </div>
        }
    }

    <div style="margin-bottom: 1rem; display: flex; gap: 10px; align-items: flex-start;">
        <input @bind:event="oninput" @bind:set="AfterSearchUpdate" @bind:get="search" class="form-control form-control-sm" placeholder="Hledat"/>
    </div>

    <div style="margin-bottom: 1rem;">
        <button class="btn btn-secondary btn-sm" @onclick="Generate">Generovat kód</button>
        <button class="btn btn-secondary btn-sm" @onclick="GenerateMissing">Doplnit chybějící překlady</button>
        <button class="btn btn-secondary btn-sm" @onclick="ForceSave">Vynutit uložení</button>
        <button class="@($"btn btn-sm {(userSettings.TranslationMode is TranslationModes.Invalidate ? "btn-danger" : "btn-secondary")}")" @onclick="CycleTranslationMode">Zápis: @(userSettings.TranslationMode.GetStringValue().FirstLetterToLower())</button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 10px; align-items: flex-start;">
        <button style="white-space: nowrap;" class="btn btn-secondary btn-sm" @onclick="AddKey">Přidat klíč</button>
        <input class="form-control form-control-sm" @bind="newKey" placeholder="Klíč"/>
    </div>
</div>

@if (translating)
{
    <p>Probíhá překlad..</p>
}

@if (!generatedCode.IsNullOrWhiteSpace())
{
    <code>
        <pre>
        @generatedCode
        </pre>
    </code>
}

<div id="@id"></div>

@if (ready && !Consts.Cfg.Experimental)
{
    <div style="max-height: 800px; overflow: auto;">
        <table id="@($"table_{id}")" class="table table-sm table-bordered table-responsive tableMain">
            <thead>
            <tr>
                <th style="width: 125px;">
                    <b>Akce</b>
                </th>
                <th data-rtc-resizable="key" style="width: 300px;">
                    <b>Klíč</b>
                </th>

                @foreach (KeyValuePair<Languages, LangData> local in langsData.Langs.OrderBy(y => y.Key))
                {
                    if (!local.Value.Visible)
                    {
                        continue;
                    }
                    
                    <th data-rtc-resizable="@local.Key">
                        <b>@local.Key</b>
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (KeyValuePair<string, Key> x in visibleKeys)
            {
                <tr>
                    <td>
                        <div>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-strategy="fixed" data-bs-boundary="window">Zobrazit akce</button>
                                <ul class="dropdown-menu">
                                    <li>
                                        <span style="cursor: pointer; user-select: none;" class="dropdown-item" @onclick="@(async () => await UpdateKey(x.Key))">Přejmenovat</span>
                                    </li>
                                    
                                    @if (Project.Decls.Count > 1)
                                    {
                                        <li>
                                            <span style="cursor: pointer; user-select: none;" class="dropdown-item"  @onclick="@(async () => await MoveKey(x.Key))">Přesunout</span>
                                        </li>
                                    }
                                    
                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>
                                    <li>
                                        <span style="cursor: pointer; user-select: none;" class="dropdown-item" @onclick="@(async () => await Delete(x.Key))">Odstranit</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </td>
                    <td style="width: 300px;">
                        <div style="max-width: 300px;">
                            <code>@x.Key</code>
                        </div>
                    </td>

                    @foreach (KeyValuePair<Languages, LangData> local in langsData.Langs.OrderBy(y => y.Key))
                    {
                        if (!local.Value.Visible)
                        {
                            continue;
                        }
                        
                        string str = local.Value.Data.GetValueOrDefault(x.Key, string.Empty);
                        string langKey = local.Key.ToString().ToLowerInvariant();
                        
                        <td>
                            <div class="input-group">
                                
                                @if (userSettings.RenderMode is RenderModes.Input)
                                {
                                    <input lang="@langKey" data-gramm="false" data-gramm_editor="false" data-enable-grammarly="false" @key="@($"input_{local.Key}_{x.Key}")" id="@($"input_{local.Key}_{x.Key}")" class="form-control form-control-md" @onblur="@(async () => await HandleKeyUpdate(local.Key, x.Key, str))" @bind="str"/>   
                                }
                                else
                                {
                                    <textarea lang="@langKey" data-gramm="false" data-gramm_editor="false" data-enable-grammarly="false" @key="@($"input_{local.Key}_{x.Key}")" id="@($"input_{local.Key}_{x.Key}")" class="form-control form-control-md" @onblur="@(async () => await HandleKeyUpdate(local.Key, x.Key, str))" @bind="str"></textarea>
                                }
                            </div>
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@if (ready)
{
    <div style="margin-top: 1rem; display: flex; gap: 100px;">
        <div>
            <div style="width: 280px;">
                <div style="margin-bottom: 5px;">Klíčů v aktivní skupině: @(Decl.Keys.Count)</div>
                <div style="margin-bottom: 1rem;">
                    <select @onchange="HandleActiveDeclChange" class="form-select">
                        @foreach (Decl x in Project.Decls)
                        {
                            <option value="@x.Id" selected="@(x == Decl)">@(x.Name.IsNullOrWhiteSpace() ? "Skupina bez názvu" : x.Name)</option>
                        }
                    </select>
                </div>
                <div style="display: flex; flex-flow: wrap; gap: 5px; margin-bottom: 5px;">
                    <button class="@($"btn btn-sm btn-secondary")" @onclick="RenameDecl">Přejmenovat skupinu</button>
                    <button class="@($"btn btn-sm btn-secondary")" @onclick="AddDecl">Přidat skupinu</button>
                    <button class="@($"btn btn-sm btn-secondary")" @onclick="DeleteDecl">Odstranit skupinu</button>
                </div>
            </div>
        </div>
        
        <div style="width: 250px;">
            <button class="@($"btn btn-sm btn-secondary")" @onclick="CycleInputMode">Zobrazení: @(userSettings.RenderMode.GetStringValue().FirstLetterToLower())</button>
        </div>

        <div style="display: flex; gap: 20px;">
            <div>
                <div style="display: flex; gap: 15px;">
                    <div style="white-space: nowrap;" class="form-label">Zobrazit klíčů (0 = všechny):</div>
                    <input style="width: 100px;" type="number" class="form-control" id="limitRender" @bind:set="AfterLimitUpdate" @bind:get="userSettings.LimitRender">
                </div>

                @if (keyPages > 1)
                {
                    <div class="d-flex align-items-center flex-wrap" style="max-width: calc(100vw - 700px); padding-top: 1rem;">
                        <div class="me-2">Strana:</div>
                        <ul class="pagination flex-wrap me-3" style="margin-bottom: 0;">
                            @{
                                int start = Math.Max(1, keySelectedPage - 5);
                                int end = Math.Min(keyPages, keySelectedPage + 5);

                                if (start > 1)
                                {
                                    <li style="user-select: none; cursor: pointer;" class="page-item">
                                        <span class="page-link" @onclick="@(async () => await SetKeyPage(1))">1</span>
                                    </li>
                                    
                                    if (start > 2)
                                    {
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    }
                                }

                                for (int i = start; i <= end; i++)
                                {
                                    int pageIndex = i;
                                    <li style="user-select: none; cursor: pointer;" @onclick="@(async () => await SetKeyPage(pageIndex))" class="page-item @(pageIndex == keySelectedPage ? "active" : string.Empty)">
                                        <span class="page-link">@pageIndex</span>
                                    </li>
                                }

                                if (end < keyPages)
                                {
                                    if (end < keyPages - 1)
                                    {
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    }
                                    
                                    <li style="user-select: none; cursor: pointer;" class="page-item">
                                        <span class="page-link" @onclick="@(async () => await SetKeyPage(keyPages))">@keyPages</span>
                                    </li>
                                }
                            }
                        </ul>
                        <div class="d-flex align-items-center">
                            <input type="number" class="form-control me-2" style="width: 120px;" placeholder="Stránka" @ref="jumpToPageInput" id="pageJumpEl" min="1" max="@keyPages" />
                            <button class="btn btn-outline-primary" @onclick="SetKeyPageJump">Přejít</button>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div style="margin-left: auto;">
            @if (synchronizingIndex)
            {
                <div>Probíhá synchronizace indexu..</div>
            }
        </div>
    </div>   
}