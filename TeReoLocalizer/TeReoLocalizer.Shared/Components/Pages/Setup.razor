@page "/setup"
@using System.Xml
@using NativeFileDialogCore
@using TeReoLocalizer.Annotations
@using TeReoLocalizer.Shared.Code
@using TeReoLocalizer.Shared.Code.Services
@layout LayoutBlog
@inherits AuthComponent
@inject NavigationManager Nm
@code {

    string projPath;
    BootDataProject? project;
    bool ready;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        project = await BootService.GetProject(User.Data().ProjectId);
        ready = true;
    }

    async Task Confirm()
    {
        if (project is null)
        {
            return;
        }

        if (!File.Exists(project.Csproj))
        {
            return;
        }

        string? rootNamespace = null;

        try
        {
            // csproj might be malformed, but we can steamroll it
            XmlDocument doc = new XmlDocument();
            doc.Load(project.Csproj);
            XmlNode? node = doc.SelectSingleNode("//RootNamespace");
            rootNamespace = node?.InnerText;
        }
        catch (Exception e)
        {
            
        }
        
        rootNamespace ??= Path.GetFileNameWithoutExtension(project.Csproj);
        
        Project reoProject = Project.Create(Languages.CS);
        reoProject.Settings.Codegen.Namespace = rootNamespace;
        
        Directory.CreateDirectory(Path.Join(project.Path, "TeReo"));
        await File.WriteAllTextAsync(Path.Join(project.Path, "TeReo", "project.json"), reoProject.ToJson(true));
        await File.WriteAllTextAsync(Path.Join(project.Path, "TeReo", "lang_CS.json"), "{}");

        if (GitService.IsRepository(project.Path, out string? rootPath))
        {
            string relativePath = Path.GetRelativePath(rootPath, project.Path);
            string content = $"{relativePath}/TeReo/userSettings.json";
            
            if (!File.Exists(Path.Join(rootPath, ".gitignore")))
            {
                await File.WriteAllTextAsync(Path.Join(rootPath, ".gitignore"), content);
            }
            else
            {
                string gitignoreContent = await File.ReadAllTextAsync(Path.Join(rootPath, ".gitignore"));

                if (!gitignoreContent.Contains(content))
                {
                    await File.AppendAllTextAsync(Path.Join(rootPath, ".gitignore"), content);   
                }
            }
        }
        
        Nm.NavigateTo("/localize");
    }

    async Task Cancel()
    {
        Nm.NavigateTo("/");
    }
}

@if (!ready)
{
    return;
}

@if (project is null)
{
    <div>Projekt neexistuje.</div>
    return;
}

<h3>Instalace do existujícího projektu</h3>          
<p>Reo do projektu <code>@(project.Name)</code> vloží několik souborů pro nastavení lokalizace. Potvrďte operaci.</p>

@if (project.IsGitRepository)
{
    <p>Projekt detekován jako Git repozitář. <code>.gitignore</code> bude rozšířen.</p>    
}

<EdButton OnClick="Confirm">Potvrdit</EdButton>
<EdButton Design="ButtonDesigns.Danger" OnClick="Cancel">Zpět</EdButton>