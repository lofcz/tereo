using System.Text;
using TeReoLocalizer.Annotations;
using TeReoLocalizer.Shared.Components.Pages;

namespace TeReoLocalizer.Shared.Code;

public class Localizer(Decl decl, LangsData langsData)
{
    public async Task<string> Generate()
    {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("""
                      // This code is automatically generated by TeReoLocalizer, do not edit manually. Changes will be overriden.
                      """);
        sb.AppendLine("using System.Globalization;");
        sb.AppendLine("using Languages = ScioSkoly.Priprava.Code.Languages;");
        sb.AppendLine();
        sb.AppendLine("namespace ScioSkoly.Priprava.I18N;");
        sb.AppendLine();
        sb.AppendLine("public class Resource2");
        sb.AppendLine("{");
        sb.AppendLine($$"""
                          public enum KnownLangs
                          {
                              Unk,
                              Czech,
                              English,
                              German
                          }

                          private Dictionary<string, string> currentLangDict;
                          private KnownLangs currentLang;
                          
                          public KnownLangs? Language { get; set; }
                          
                          public Resource2()
                          {
                              
                          }
                          
                          public Resource2(KnownLangs lang)
                          {
                              Language = lang;
                          }
                          
                          public Resource2(Languages? lang)
                          {
                              Language = lang switch
                              {
                                  Languages.Czech => KnownLangs.Czech,
                                  Languages.English => KnownLangs.English,
                                  Languages.German => KnownLangs.German,
                                  _ => KnownLangs.Czech
                              };
                          }
                          
                          private static readonly Dictionary<KnownLangs, Dictionary<string, string>> Data = new Dictionary<KnownLangs, Dictionary<string, string>>
                          {
                                {{DumpDictionaries()}}
                          };
                          
                          private static readonly Dictionary<int, KnownLangs> LcidDict = new Dictionary<int, KnownLangs>
                          {
                              { 1029, KnownLangs.Czech },
                              { 1033, KnownLangs.English },
                              { 1031, KnownLangs.German },
                              { 3079, KnownLangs.German },
                              { 5127, KnownLangs.German },
                              { 4103, KnownLangs.German },
                              { 2055, KnownLangs.German }
                          };
                          
                          private string GetStringLocal(string key)
                          {
                              // if no known lang is set, use current culture
                              KnownLangs lang = Language ?? LcidDict.GetValueOrDefault(CultureInfo.CurrentUICulture.LCID, KnownLangs.Czech);
                              
                              if (Data[lang].TryGetValue(key, out string? translated))
                              {
                                  return translated;
                              }
                          
                              return key;
                          }
                          
                          private static string GetString(string key)
                          {
                              KnownLangs lang = LcidDict.GetValueOrDefault(CultureInfo.CurrentUICulture.LCID, KnownLangs.Czech);
                              return Data[lang].TryGetValue(key, out string? translated) ? translated : key;
                          }
                          
                          private static string GetString(string key, KnownLangs? knownLang)
                          {
                              KnownLangs lang = knownLang ?? LcidDict.GetValueOrDefault(CultureInfo.CurrentUICulture.LCID, KnownLangs.Czech);
                              return Data[lang].TryGetValue(key, out string? translated) ? translated : key;
                          }
                          
                          {{DumpProps()}}
                      """);

        sb.AppendLine("}");

        string val = sb.ToString().Trim();
        return val;

        string DumpDictionaries()
        {
            StringBuilder dictBuilder = new StringBuilder();

            foreach (KeyValuePair<Languages, LangData> lang in langsData.Langs.OrderBy(x => x.Key))
            {
                dictBuilder.AppendLine("{");

                dictBuilder.AppendLine("KnownLangs.Czech, new Dictionary<string, string>");
                dictBuilder.AppendLine("{");

                foreach (KeyValuePair<string, string> x in lang.Value.Data.OrderBy(x => x.Key))
                {
                    if (x.Key.IsNullOrWhiteSpace())
                    {
                        continue;
                    }
                    
                    dictBuilder.AppendLine($"{{ \"{x.Key.Trim()}\", \"{x.Value.Replace("\"", "\\\"")}\" }},");
                }
                
                dictBuilder.AppendLine("}");
                
                dictBuilder.AppendLine("}");
                dictBuilder.AppendLine(",");
            }
            
            return dictBuilder.ToString().Trim();
        }

        string DumpProps()
        {
            StringBuilder propsBuilder = new StringBuilder();

            foreach (KeyValuePair<string, Key> x in decl.Keys)
            {
                if (x.Key.IsNullOrWhiteSpace())
                {
                    continue;
                }
                
                propsBuilder.AppendLine($"public static string {CsIdentifier(x.Key)} => GetString(\"{x.Key.Trim()}\");");
            }
            
            return propsBuilder.ToString().Trim();
        }
    }

    private string CsIdentifier(string name)
    {
        return name.Trim().Replace(" ", string.Empty);
    }
}