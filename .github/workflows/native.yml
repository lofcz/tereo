name: Build Native Application and Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build:
    runs-on: windows-latest
    permissions:
      packages: write
      contents: write
      repository-projects: write

    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4.3.0
      with:
        dotnet-version: 8.0.x
        
    - name: Setup Windows SDK
      uses: microsoft/setup-msbuild@v2
    
    - name: Calculate New Version
      id: version_check
      shell: pwsh
      run: |
        $projPath = "./TeReoLocalizer/TeReoLocalizer/TeReoLocalizer.csproj"
        $xml = [xml](Get-Content $projPath)
        
        $propertyGroup = $xml.Project.PropertyGroup
        if ($propertyGroup -is [array]) {
            $propertyGroup = $propertyGroup[0]
        }
        if (-not $propertyGroup) {
            $propertyGroup = $xml.CreateElement("PropertyGroup")
            $xml.Project.AppendChild($propertyGroup)
        }
        
        # Update Version
        $versionElement = $propertyGroup.SelectSingleNode("Version")
        if (-not $versionElement) {
            $versionElement = $xml.CreateElement("Version")
            $versionElement.InnerText = "1.0.0"
            $propertyGroup.AppendChild($versionElement)
        }
        
        # Update AssemblyVersion
        $assemblyVersionElement = $propertyGroup.SelectSingleNode("AssemblyVersion")
        if (-not $assemblyVersionElement) {
            $assemblyVersionElement = $xml.CreateElement("AssemblyVersion")
            $assemblyVersionElement.InnerText = "1.0.0"
            $propertyGroup.AppendChild($assemblyVersionElement)
        }
        
        $currentVersion = $versionElement.InnerText
        if ([string]::IsNullOrEmpty($currentVersion)) {
            $currentVersion = "1.0.0"
        }
        
        Write-Host "Current version: $currentVersion"
        
        $versionParts = $currentVersion.Split('.')
        $major = [int]$versionParts[0]
        $minor = [int]$versionParts[1]
        $patch = [int]$versionParts[2]
        
        switch ("${{ github.event.inputs.release_type }}") {
            "major" { $newVersion = "$($major + 1).0.0" }
            "minor" { $newVersion = "$major.$($minor + 1).0" }
            "patch" { $newVersion = "$major.$minor.$($patch + 1)" }
        }
        
        Write-Host "New version: $newVersion"
        
        # Aktualizace obou verzÃ­
        $versionElement.InnerText = $newVersion
        $assemblyVersionElement.InnerText = $newVersion
        $xml.Save($projPath)
        
        echo "NEW_VERSION=$newVersion" >> $env:GITHUB_ENV
        
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2.0.1
      
    - name: Restore NuGet packages for .NET Framework projects
      working-directory: ./TeReoLocalizer
      run: |
        nuget restore TeReoLocalizer.Updater/TeReoLocalizer.Updater.csproj -SolutionDirectory .
        nuget restore TeReoLocalizer.Launcher/TeReoLocalizer.Launcher.csproj -SolutionDirectory .

    - name: Install MAUI Workload
      run: |
        dotnet workload install maui-windows --ignore-failed-sources --skip-manifest-update
    
    - name: Restore workloads
      working-directory: ./TeReoLocalizer
      run: |
        dotnet workload restore TeReoLocalizer/TeReoLocalizer.csproj
  
    - name: Restore dependencies
      working-directory: ./TeReoLocalizer
      run: dotnet restore TeReoLocalizer.sln
      
    - name: Run publish script
      shell: cmd
      working-directory: ./TeReoLocalizer/TeReoLocalizer
      run: |
        set "AUTOMATION_MODE=1"
        call publish.bat

    - name: Create Release ZIP
      shell: pwsh
      run: |
        Compress-Archive -Path "./TeReoLocalizer/TeReoLocalizer/bin/Release/net8.0-windows10.0.19041.0/win10-x64/dist/*" -DestinationPath "TeReoLocalizer-v${{ env.NEW_VERSION }}.zip"

    - name: Check ZIP file exists
      run: |
        if (!(Test-Path "TeReoLocalizer-v${{ env.NEW_VERSION }}.zip")) {
          Write-Error "ZIP file not found!"
          exit 1
        }
      shell: pwsh

    - name: Generate Release Notes
      id: release_notes
      shell: pwsh
      run: |
        $tags = $(git tag -l --sort=-v:refname)
        
        if ($tags) {
            $latestTag = $tags[0]
            Write-Host "Latest tag: $latestTag"
            $commits = (git log "$latestTag..HEAD" --pretty=format:"- %s" --no-merges) -join "`n`n"
        } else {
            Write-Host "No tags found, getting all commits"
            $commits = (git log --pretty=format:"- %s" --no-merges) -join "`n`n"
        }
        
        if ([string]::IsNullOrWhiteSpace($commits)) {
            $commits = "- First release"
        }
        
        $releaseNotes = "## What's Changed`n`n$commits"
        Write-Host "Release Notes: $releaseNotes"
        
        # Escape special characters for GitHub Actions
        $releaseNotes = $releaseNotes.Replace("%", "%25").Replace("`n", "%0A").Replace("`r", "%0D")
        
        echo "RELEASE_NOTES=$releaseNotes" >> $env:GITHUB_ENV
  
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ./TeReoLocalizer/TeReoLocalizer/TeReoLocalizer.csproj
        git commit -m "Update version to v${{ env.NEW_VERSION }}"
        git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
        git push --follow-tags

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1.15.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release v${{ env.NEW_VERSION }}
        tag: v${{ env.NEW_VERSION }}
        body: ${{ fromJSON(toJSON(env.RELEASE_NOTES)) }}
        draft: false
        prerelease: false
        commit: "master"
        artifacts: "TeReoLocalizer-v${{ env.NEW_VERSION }}.zip"
        allowUpdates: true

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: TeReoLocalizer
        path: ./TeReoLocalizer/TeReoLocalizer/bin/Release/net8.0-windows10.0.19041.0/win10-x64/dist/